import { Component, Input, Output, EventEmitter, ContentChildren, NgModule } from '@angular/core';
import { filter } from 'rxjs/operators/filter';
import { CommonModule } from '@angular/common';
import { Paginator } from 'primeng/components/paginator/paginator';
import 'rxjs/Observable';
import { take } from 'rxjs/operators/take';
import { Logger, trackByIndex } from '@mastercard/ng-commons';
import { FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * A trigger that can be clicked to show/hide a target element.
 *
 * See also {\@link MccCollapseGroupComponent}.
 */
class MccCollapseComponent {
    constructor() {
        /**
         * `true` for hidden, `false` for shown.
         */
        this.collapsed = true;
        /**
         * Notifies when the `collapsed` state changes.
         */
        this.collapseChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.updateTarget();
        this.getTarget().classList.toggle('arrow_box_panel', true);
    }
    /**
     * @return {?}
     */
    get classes() {
        return this.useClass ? this.useClass.split(' ') : [];
    }
    /**
     * Hides or displays the target.
     * @param {?} collapsed hidden is `true`, shown is `false`.
     * @return {?}
     */
    setCollapsed(collapsed) {
        this.collapsed = collapsed;
        this.updateTarget();
        this.collapseChange.emit(collapsed);
    }
    /**
     * Displays or hides the target according to the trigger state.
     * @return {?}
     */
    updateTarget() {
        this.getTarget().hidden = this.collapsed;
    }
    /**
     * @return {?}
     */
    getTarget() {
        return this.target;
    }
}
MccCollapseComponent.decorators = [
    { type: Component, args: [{
                selector: 'mcc-collapse',
                styles: [`.open{
  cursor:pointer;
  position:relative; }
.arrow_box_arrow{
  border:solid #F0EDE9;
  border-color:rgba(194, 225, 245, 0);
  border-bottom-color:#F0EDE9;
  border-width:15px; }
  .arrow_box_arrow.hidden{
    display:none; }
li{
  text-align:center; }
`],
                template: `<li><a class="open"
  [ngClass]="classes"
  (click)="setCollapsed(!collapsed)">
    <span #content><ng-content></ng-content></span>
    <span *ngIf="!content.childNodes.length && !content.innerText">
      Toggle
    </span>
    <span>
      <i class="fa"
        [ngClass]="{
          'fa-chevron-up': !collapsed,
          'fa-chevron-down': collapsed
        }"
      ></i>
    </span>
    <br>
    <span class="arrow_box_arrow"
      [ngClass]="{ hidden: collapsed }"
    ></span>
</a></li>
`,
            },] },
];
/** @nocollapse */
MccCollapseComponent.ctorParameters = () => [];
MccCollapseComponent.propDecorators = {
    "target": [{ type: Input },],
    "collapsed": [{ type: Input },],
    "useClass": [{ type: Input },],
    "collapseChange": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Use this component when you need to group multiple collapse triggers together.
 * When inside a group, a trigger will open its target and close the others.
 *
 * ### Example
 *
 * ```html
 * <mcc-collapse-group>
 *   <mcc-collapse [target]="t1">Filters</mcc-collapse>
 *   <div #t1>Your filters here</div>
 *
 *   <mcc-collapse [target]="t2">Columns</mcc-collapse>
 *   <div #t2>Your columns here</div>
 * </mcc-collapse-group>
 * ```
 */
class MccCollapseGroupComponent {
    constructor() {
        this.subscribeCollapseChanges = (trigger) => {
            trigger.collapseChange.pipe(filter(isCollapsed => !isCollapsed)).subscribe(() => {
                this.closeOtherTriggers(trigger);
            });
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.triggers.forEach(this.subscribeCollapseChanges);
    }
    /**
     * @param {?} currentTrigger
     * @return {?}
     */
    closeOtherTriggers(currentTrigger) {
        this.triggers
            .filter(other => other !== currentTrigger)
            .forEach(trigger => trigger.setCollapsed(true));
    }
}
MccCollapseGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'mcc-collapse-group',
                template: `<div class="filter">
  <ul class="multifilter">
    <ng-content select="mcc-collapse"></ng-content>
  </ul>
  <div class="clearBoth"></div>
  <ng-content></ng-content>
</div>
`,
                styles: [`:host /deep/ .arrow_box_panel:before, :host /deep/ .arrow_box_panel:after{
  display:none; }
ul{
  margin-bottom:0;
  margin-top:15px; }
`],
            },] },
];
/** @nocollapse */
MccCollapseGroupComponent.ctorParameters = () => [];
MccCollapseGroupComponent.propDecorators = {
    "triggers": [{ type: ContentChildren, args: [MccCollapseComponent,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * This feature allows the user click on an element to show/hide a target element.
 */
class MccCollapseModule {
}
MccCollapseModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                ],
                exports: [
                    MccCollapseComponent,
                    MccCollapseGroupComponent,
                ],
                declarations: [
                    MccCollapseComponent,
                    MccCollapseGroupComponent,
                ],
            },] },
];
/** @nocollapse */
MccCollapseModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Labels used on the paginator template.
 * @record
 */

/**
 * This component provides the table's pagination controls.
 * It overrides PrimeNG's native pagination to add some MCC features.
 */
class MccPaginatorComponent extends Paginator {
    /**
     * @param {?} logger
     */
    constructor(logger) {
        super();
        this.logger = logger;
        /**
         * Emits when the component is about to change the current page.
         */
        this.beforePagination = new EventEmitter();
        this.trackByIndex = trackByIndex;
        this.logger.debug('MccPaginatorComponent built');
    }
    /**
     * Change handler for the current page input field.
     * @param {?} e the change event.
     * @return {?}
     */
    onCurrentPageChange(e) {
        const /** @type {?} */ val = parseInt(e.target['value'], 10);
        const /** @type {?} */ min = parseInt(e.target['min'], 10);
        const /** @type {?} */ max = parseInt(e.target['max'], 10);
        if (isNaN(val) || val < min || val > max) {
            e.target['value'] = this.getPage() + 1;
        }
        else {
            this.changePage(val - 1);
        }
    }
    /**
     * @param {?} $event
     * @param {?} target
     * @param {?=} pageLink
     * @return {?}
     */
    checkPaginator($event, target, pageLink) {
        this.beforePagination.emit();
        if (this.paginationFilter) {
            this.paginationFilter.pipe(take(1)).subscribe(result => {
                if (result) {
                    this.continuePagination($event, target, pageLink ? pageLink : 0);
                }
                else {
                    this.logger.info('Skipping navigation due to pagination filter.');
                }
            });
        }
        else {
            this.continuePagination($event, target, pageLink ? pageLink : 0);
        }
        return false;
    }
    /**
     * @param {?} $event
     * @param {?} target
     * @param {?} pageLink
     * @return {?}
     */
    continuePagination($event, target, pageLink) {
        switch (target) {
            case 'changePageToFirst':
                this.changePageToFirst($event);
                break;
            case 'changePageToPrev':
                this.changePageToPrev($event);
                break;
            case 'changePageToNext':
                this.changePageToNext($event);
                break;
            case 'changePageToLast':
                this.changePageToLast($event);
                break;
            case 'changePage':
                this.changePage(pageLink);
                break;
            case 'onCurrentPageChange':
                this.onCurrentPageChange($event);
                break;
            case 'onRppChange':
                this.onRppChange($event);
                break;
            default:
                throw new Error('Unknown target ' + target);
        }
    }
    /**
     * Current page first row index
     * @return {?}
     */
    get pageFirstRow() {
        return this.first + 1;
    }
    /**
     * Current page last row index
     * @return {?}
     */
    get pageLastRow() {
        const /** @type {?} */ last = this.first + this.rows;
        return Math.min(last, this.totalRecords);
    }
    /**
     * @return {?}
     */
    get paginatorLabels() {
        const /** @type {?} */ defaults = {
            page: 'Page',
            of: 'of',
            first: 'First',
            previous: 'Previous',
            next: 'Next',
            last: 'Last',
            viewing: 'Viewing',
        };
        return Object.assign(defaults, this.labels);
    }
}
MccPaginatorComponent.decorators = [
    { type: Component, args: [{
                selector: 'mcc-paginator',
                template: `<div
  [class]="styleClass"
  [ngStyle]="style"
  [ngClass]="'ui-paginator ui-widget ui-widget-header ui-unselectable-text'"
  *ngIf="alwaysShow ? true : (pageLinks && pageLinks.length > 1)"
>
  <span [ngClass]="{ 'ui-state-disabled' : getPageCount() == 1 }">
    {{ paginatorLabels.page }}
    <input type="number"
      name="currentPage"
      class="no-spin"
      [min]="1"
      [max]="getPageCount()"
      [step]="1"
      [value]="getPage() + 1"
      (change)="checkPaginator($event, 'onCurrentPageChange')"
    />
    {{ paginatorLabels.of }} {{ getPageCount() }}
  </span>
  <span class="ui-paginator-pages">
    <a href="#" class="ui-paginator-page ui-paginator-element ui-state-default ui-corner-all"
      (click)="checkPaginator($event, 'changePageToFirst')"
      [ngClass]="{'ui-state-disabled':isFirstPage()}"
      [tabindex]="isFirstPage() ? -1 : null"
    >{{ paginatorLabels.first }}</a>
    <a href="#" class="ui-paginator-page ui-paginator-element ui-state-default ui-corner-all"
      (click)="checkPaginator($event, 'changePageToPrev')"
      [ngClass]="{'ui-state-disabled':isFirstPage()}"
      [tabindex]="isFirstPage() ? -1 : null"
    >{{ paginatorLabels.previous }}</a>
    <a href="#" *ngFor="let pageLink of pageLinks; trackBy: trackByIndex"
      class="ui-paginator-page ui-paginator-element ui-state-default ui-corner-all"
      (click)="checkPaginator($event, 'changePage', pageLink - 1)"
      [ngClass]="{'ui-state-active': (pageLink-1 == getPage())}"
    >{{ pageLink }}</a>
    <a href="#" class="ui-paginator-page ui-paginator-element ui-state-default ui-corner-all"
      (click)="checkPaginator($event, 'changePageToNext')"
      [ngClass]="{'ui-state-disabled':isLastPage()}"
      [tabindex]="isLastPage() ? -1 : null"
    >{{ paginatorLabels.next }}</a>
    <a href="#" class="ui-paginator-page ui-paginator-element ui-state-default ui-corner-all"
      (click)="checkPaginator($event, 'changePageToLast')"
      [ngClass]="{'ui-state-disabled':isLastPage()}"
      [tabindex]="isLastPage() ? -1 : null"
    >{{ paginatorLabels.last }}</a>
  </span>
  <select class="ui-paginator-rpp-options ui-widget ui-state-default"
    *ngIf="rowsPerPageOptions"
    (change)="checkPaginator($event, 'onRppChange')"
  >
    <option *ngFor="let opt of rowsPerPageOptions; trackBy: trackByIndex"
      [value]="opt"
      [selected]="rows == opt"
    >{{ opt }}</option>
  </select>
  <span class="pull-right" *ngIf="totalRecords > 0">
    {{ paginatorLabels.viewing }}
    <span *ngIf="pageFirstRow === pageLastRow; else other">{{ pageFirstRow }}</span>
    <ng-template #other>{{ pageFirstRow }}-{{ pageLastRow }}</ng-template>
    {{ paginatorLabels.of }} {{ totalRecords }}
  </span>
</div>
`,
                styles: [`.ui-paginator{
  margin-top:16px;
  background:none; }
  .ui-paginator select{
    width:inherit; }
  .ui-paginator.ui-widget-header{
    border-style:none;
    font-family:MarkOffc;
    font-size:14px;
    text-align:left; }
  .ui-paginator > .ui-paginator-pages > a.ui-paginator-page{
    color:#e87600; }
    .ui-paginator > .ui-paginator-pages > a.ui-paginator-page.ui-state-active{
      font-weight:bolder; }
    .ui-paginator > .ui-paginator-pages > a.ui-paginator-page:hover{
      background-color:inherit; }
  .ui-paginator .ui-state-active,
  .ui-paginator .ui-state-highlight{
    background-color:inherit; }
  .ui-paginator input[name="currentPage"]{
    width:4em;
    margin-left:4px;
    margin-right:4px; }
  .ui-paginator .ui-paginator-pages{
    margin-left:3.5em; }
    .ui-paginator .ui-paginator-pages .ui-paginator-page{
      margin:0 8px; }
`],
            },] },
];
/** @nocollapse */
MccPaginatorComponent.ctorParameters = () => [
    { type: Logger, },
];
MccPaginatorComponent.propDecorators = {
    "paginationFilter": [{ type: Input },],
    "labels": [{ type: Input },],
    "beforePagination": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MccPaginatorModule {
}
MccPaginatorModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [MccPaginatorComponent],
                declarations: [MccPaginatorComponent],
                providers: [],
            },] },
];
/** @nocollapse */
MccPaginatorModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Components, directives, pipes etc. for Mastercard Connect.
 */
class MccCommons {
}
MccCommons.decorators = [
    { type: NgModule, args: [{
                declarations: [],
                imports: [
                    CommonModule,
                    FormsModule,
                ],
                exports: [
                    MccCollapseModule,
                    MccPaginatorModule,
                ],
            },] },
];
/** @nocollapse */
MccCommons.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { MccCollapseComponent, MccCollapseModule, MccPaginatorModule, MccPaginatorComponent, MccCommons, MccCollapseGroupComponent as ɵa };
//# sourceMappingURL=mc-connect-ng-commons.js.map
