import { __extends } from 'tslib';
import { Component, Input, Output, EventEmitter, ContentChildren, NgModule } from '@angular/core';
import { filter } from 'rxjs/operators/filter';
import { CommonModule } from '@angular/common';
import { Paginator } from 'primeng/components/paginator/paginator';
import 'rxjs/Observable';
import { take } from 'rxjs/operators/take';
import { Logger, trackByIndex } from '@mastercard/ng-commons';
import { FormsModule } from '@angular/forms';

var MccCollapseComponent = /** @class */ (function () {
    function MccCollapseComponent() {
        this.collapsed = true;
        this.collapseChange = new EventEmitter();
    }
    MccCollapseComponent.prototype.ngOnInit = function () {
        this.updateTarget();
        this.getTarget().classList.toggle('arrow_box_panel', true);
    };
    Object.defineProperty(MccCollapseComponent.prototype, "classes", {
        get: function () {
            return this.useClass ? this.useClass.split(' ') : [];
        },
        enumerable: true,
        configurable: true
    });
    MccCollapseComponent.prototype.setCollapsed = function (collapsed) {
        this.collapsed = collapsed;
        this.updateTarget();
        this.collapseChange.emit(collapsed);
    };
    MccCollapseComponent.prototype.updateTarget = function () {
        this.getTarget().hidden = this.collapsed;
    };
    MccCollapseComponent.prototype.getTarget = function () {
        return this.target;
    };
    return MccCollapseComponent;
}());
MccCollapseComponent.decorators = [
    { type: Component, args: [{
                selector: 'mcc-collapse',
                styles: [".open{\n  cursor:pointer;\n  position:relative; }\n.arrow_box_arrow{\n  border:solid #F0EDE9;\n  border-color:rgba(194, 225, 245, 0);\n  border-bottom-color:#F0EDE9;\n  border-width:15px; }\n  .arrow_box_arrow.hidden{\n    display:none; }\nli{\n  text-align:center; }\n"],
                template: "<li><a class=\"open\"\n  [ngClass]=\"classes\"\n  (click)=\"setCollapsed(!collapsed)\">\n    <span #content><ng-content></ng-content></span>\n    <span *ngIf=\"!content.childNodes.length && !content.innerText\">\n      Toggle\n    </span>\n    <span>\n      <i class=\"fa\"\n        [ngClass]=\"{\n          'fa-chevron-up': !collapsed,\n          'fa-chevron-down': collapsed\n        }\"\n      ></i>\n    </span>\n    <br>\n    <span class=\"arrow_box_arrow\"\n      [ngClass]=\"{ hidden: collapsed }\"\n    ></span>\n</a></li>\n",
            },] },
];
MccCollapseComponent.ctorParameters = function () { return []; };
MccCollapseComponent.propDecorators = {
    "target": [{ type: Input },],
    "collapsed": [{ type: Input },],
    "useClass": [{ type: Input },],
    "collapseChange": [{ type: Output },],
};
var MccCollapseGroupComponent = /** @class */ (function () {
    function MccCollapseGroupComponent() {
        var _this = this;
        this.subscribeCollapseChanges = function (trigger) {
            trigger.collapseChange.pipe(filter(function (isCollapsed) { return !isCollapsed; })).subscribe(function () {
                _this.closeOtherTriggers(trigger);
            });
        };
    }
    MccCollapseGroupComponent.prototype.ngAfterViewInit = function () {
        this.triggers.forEach(this.subscribeCollapseChanges);
    };
    MccCollapseGroupComponent.prototype.closeOtherTriggers = function (currentTrigger) {
        this.triggers
            .filter(function (other) { return other !== currentTrigger; })
            .forEach(function (trigger) { return trigger.setCollapsed(true); });
    };
    return MccCollapseGroupComponent;
}());
MccCollapseGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'mcc-collapse-group',
                template: "<div class=\"filter\">\n  <ul class=\"multifilter\">\n    <ng-content select=\"mcc-collapse\"></ng-content>\n  </ul>\n  <div class=\"clearBoth\"></div>\n  <ng-content></ng-content>\n</div>\n",
                styles: [":host /deep/ .arrow_box_panel:before, :host /deep/ .arrow_box_panel:after{\n  display:none; }\nul{\n  margin-bottom:0;\n  margin-top:15px; }\n"],
            },] },
];
MccCollapseGroupComponent.ctorParameters = function () { return []; };
MccCollapseGroupComponent.propDecorators = {
    "triggers": [{ type: ContentChildren, args: [MccCollapseComponent,] },],
};
var MccCollapseModule = /** @class */ (function () {
    function MccCollapseModule() {
    }
    return MccCollapseModule;
}());
MccCollapseModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                ],
                exports: [
                    MccCollapseComponent,
                    MccCollapseGroupComponent,
                ],
                declarations: [
                    MccCollapseComponent,
                    MccCollapseGroupComponent,
                ],
            },] },
];
MccCollapseModule.ctorParameters = function () { return []; };
var MccPaginatorComponent = /** @class */ (function (_super) {
    __extends(MccPaginatorComponent, _super);
    function MccPaginatorComponent(logger) {
        var _this = _super.call(this) || this;
        _this.logger = logger;
        _this.beforePagination = new EventEmitter();
        _this.trackByIndex = trackByIndex;
        _this.logger.debug('MccPaginatorComponent built');
        return _this;
    }
    MccPaginatorComponent.prototype.onCurrentPageChange = function (e) {
        var val = parseInt(e.target['value'], 10);
        var min = parseInt(e.target['min'], 10);
        var max = parseInt(e.target['max'], 10);
        if (isNaN(val) || val < min || val > max) {
            e.target['value'] = this.getPage() + 1;
        }
        else {
            this.changePage(val - 1);
        }
    };
    MccPaginatorComponent.prototype.checkPaginator = function ($event, target, pageLink) {
        var _this = this;
        this.beforePagination.emit();
        if (this.paginationFilter) {
            this.paginationFilter.pipe(take(1)).subscribe(function (result) {
                if (result) {
                    _this.continuePagination($event, target, pageLink ? pageLink : 0);
                }
                else {
                    _this.logger.info('Skipping navigation due to pagination filter.');
                }
            });
        }
        else {
            this.continuePagination($event, target, pageLink ? pageLink : 0);
        }
        return false;
    };
    MccPaginatorComponent.prototype.continuePagination = function ($event, target, pageLink) {
        switch (target) {
            case 'changePageToFirst':
                this.changePageToFirst($event);
                break;
            case 'changePageToPrev':
                this.changePageToPrev($event);
                break;
            case 'changePageToNext':
                this.changePageToNext($event);
                break;
            case 'changePageToLast':
                this.changePageToLast($event);
                break;
            case 'changePage':
                this.changePage(pageLink);
                break;
            case 'onCurrentPageChange':
                this.onCurrentPageChange($event);
                break;
            case 'onRppChange':
                this.onRppChange($event);
                break;
            default:
                throw new Error('Unknown target ' + target);
        }
    };
    Object.defineProperty(MccPaginatorComponent.prototype, "pageFirstRow", {
        get: function () {
            return this.first + 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MccPaginatorComponent.prototype, "pageLastRow", {
        get: function () {
            var last = this.first + this.rows;
            return Math.min(last, this.totalRecords);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MccPaginatorComponent.prototype, "paginatorLabels", {
        get: function () {
            var defaults = {
                page: 'Page',
                of: 'of',
                first: 'First',
                previous: 'Previous',
                next: 'Next',
                last: 'Last',
                viewing: 'Viewing',
            };
            return Object.assign(defaults, this.labels);
        },
        enumerable: true,
        configurable: true
    });
    return MccPaginatorComponent;
}(Paginator));
MccPaginatorComponent.decorators = [
    { type: Component, args: [{
                selector: 'mcc-paginator',
                template: "<div\n  [class]=\"styleClass\"\n  [ngStyle]=\"style\"\n  [ngClass]=\"'ui-paginator ui-widget ui-widget-header ui-unselectable-text'\"\n  *ngIf=\"alwaysShow ? true : (pageLinks && pageLinks.length > 1)\"\n>\n  <span [ngClass]=\"{ 'ui-state-disabled' : getPageCount() == 1 }\">\n    {{ paginatorLabels.page }}\n    <input type=\"number\"\n      name=\"currentPage\"\n      class=\"no-spin\"\n      [min]=\"1\"\n      [max]=\"getPageCount()\"\n      [step]=\"1\"\n      [value]=\"getPage() + 1\"\n      (change)=\"checkPaginator($event, 'onCurrentPageChange')\"\n    />\n    {{ paginatorLabels.of }} {{ getPageCount() }}\n  </span>\n  <span class=\"ui-paginator-pages\">\n    <a href=\"#\" class=\"ui-paginator-page ui-paginator-element ui-state-default ui-corner-all\"\n      (click)=\"checkPaginator($event, 'changePageToFirst')\"\n      [ngClass]=\"{'ui-state-disabled':isFirstPage()}\"\n      [tabindex]=\"isFirstPage() ? -1 : null\"\n    >{{ paginatorLabels.first }}</a>\n    <a href=\"#\" class=\"ui-paginator-page ui-paginator-element ui-state-default ui-corner-all\"\n      (click)=\"checkPaginator($event, 'changePageToPrev')\"\n      [ngClass]=\"{'ui-state-disabled':isFirstPage()}\"\n      [tabindex]=\"isFirstPage() ? -1 : null\"\n    >{{ paginatorLabels.previous }}</a>\n    <a href=\"#\" *ngFor=\"let pageLink of pageLinks; trackBy: trackByIndex\"\n      class=\"ui-paginator-page ui-paginator-element ui-state-default ui-corner-all\"\n      (click)=\"checkPaginator($event, 'changePage', pageLink - 1)\"\n      [ngClass]=\"{'ui-state-active': (pageLink-1 == getPage())}\"\n    >{{ pageLink }}</a>\n    <a href=\"#\" class=\"ui-paginator-page ui-paginator-element ui-state-default ui-corner-all\"\n      (click)=\"checkPaginator($event, 'changePageToNext')\"\n      [ngClass]=\"{'ui-state-disabled':isLastPage()}\"\n      [tabindex]=\"isLastPage() ? -1 : null\"\n    >{{ paginatorLabels.next }}</a>\n    <a href=\"#\" class=\"ui-paginator-page ui-paginator-element ui-state-default ui-corner-all\"\n      (click)=\"checkPaginator($event, 'changePageToLast')\"\n      [ngClass]=\"{'ui-state-disabled':isLastPage()}\"\n      [tabindex]=\"isLastPage() ? -1 : null\"\n    >{{ paginatorLabels.last }}</a>\n  </span>\n  <select class=\"ui-paginator-rpp-options ui-widget ui-state-default\"\n    *ngIf=\"rowsPerPageOptions\"\n    (change)=\"checkPaginator($event, 'onRppChange')\"\n  >\n    <option *ngFor=\"let opt of rowsPerPageOptions; trackBy: trackByIndex\"\n      [value]=\"opt\"\n      [selected]=\"rows == opt\"\n    >{{ opt }}</option>\n  </select>\n  <span class=\"pull-right\" *ngIf=\"totalRecords > 0\">\n    {{ paginatorLabels.viewing }}\n    <span *ngIf=\"pageFirstRow === pageLastRow; else other\">{{ pageFirstRow }}</span>\n    <ng-template #other>{{ pageFirstRow }}-{{ pageLastRow }}</ng-template>\n    {{ paginatorLabels.of }} {{ totalRecords }}\n  </span>\n</div>\n",
                styles: [".ui-paginator{\n  margin-top:16px;\n  background:none; }\n  .ui-paginator select{\n    width:inherit; }\n  .ui-paginator.ui-widget-header{\n    border-style:none;\n    font-family:MarkOffc;\n    font-size:14px;\n    text-align:left; }\n  .ui-paginator > .ui-paginator-pages > a.ui-paginator-page{\n    color:#e87600; }\n    .ui-paginator > .ui-paginator-pages > a.ui-paginator-page.ui-state-active{\n      font-weight:bolder; }\n    .ui-paginator > .ui-paginator-pages > a.ui-paginator-page:hover{\n      background-color:inherit; }\n  .ui-paginator .ui-state-active,\n  .ui-paginator .ui-state-highlight{\n    background-color:inherit; }\n  .ui-paginator input[name=\"currentPage\"]{\n    width:4em;\n    margin-left:4px;\n    margin-right:4px; }\n  .ui-paginator .ui-paginator-pages{\n    margin-left:3.5em; }\n    .ui-paginator .ui-paginator-pages .ui-paginator-page{\n      margin:0 8px; }\n"],
            },] },
];
MccPaginatorComponent.ctorParameters = function () { return [
    { type: Logger, },
]; };
MccPaginatorComponent.propDecorators = {
    "paginationFilter": [{ type: Input },],
    "labels": [{ type: Input },],
    "beforePagination": [{ type: Output },],
};
var MccPaginatorModule = /** @class */ (function () {
    function MccPaginatorModule() {
    }
    return MccPaginatorModule;
}());
MccPaginatorModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [MccPaginatorComponent],
                declarations: [MccPaginatorComponent],
                providers: [],
            },] },
];
MccPaginatorModule.ctorParameters = function () { return []; };
var MccCommons = /** @class */ (function () {
    function MccCommons() {
    }
    return MccCommons;
}());
MccCommons.decorators = [
    { type: NgModule, args: [{
                declarations: [],
                imports: [
                    CommonModule,
                    FormsModule,
                ],
                exports: [
                    MccCollapseModule,
                    MccPaginatorModule,
                ],
            },] },
];
MccCommons.ctorParameters = function () { return []; };

export { MccCollapseComponent, MccCollapseModule, MccPaginatorModule, MccPaginatorComponent, MccCommons, MccCollapseGroupComponent as ɵa };
//# sourceMappingURL=mc-connect-ng-commons.js.map
