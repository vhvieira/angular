import { EventEmitter } from '@angular/core';
import { Paginator } from 'primeng/components/paginator/paginator';
import { Observable } from 'rxjs/Observable';
import { Logger, trackByIndex } from '@mastercard/ng-commons';
/** Labels used on the paginator template. */
export interface Labels {
    page?: string;
    of?: string;
    first?: string;
    previous?: string;
    next?: string;
    last?: string;
    viewing?: string;
}
/**
 * This component provides the table's pagination controls.
 * It overrides PrimeNG's native pagination to add some MCC features.
 */
export declare class MccPaginatorComponent extends Paginator {
    private logger;
    /**
     * The Pagination controls will only works if this filter return true.
     * If this filter is undefined, the paginator will not be filtered.
     */
    paginationFilter: Observable<boolean>;
    /**
     * Map to customize the paginator's labels. Useful for i18n.
     * ### Example
     * ```html
     * <!-- template file -->
     * <mcc-paginator
     *  [labels]="labels"
     *  ...
     * ```
     * ```ts
     *
     * // component file
     * import { Labels } from '@mc-connect/ng-commons';
     * ...
     *
     * this.translateService
     *  .get([
     *    'MY.GRID.FIRST',
     *    'MY.GRID.PREVIOUS',
     *    ...
     *  ])
     *  .map(translated => {
     *    return {
     *      first: translated['MY.GRID.FIRST'],
     *      previous: translated['MY.GRID.PREVIOUS'],
     *      ...
     *    };
     *  })
     *  .subscribe((translated: Labels) => {
     *    this.labels = translated;
     *  });
     * ```
     */
    labels?: Labels;
    /** Emits when the component is about to change the current page. */
    beforePagination: EventEmitter<void>;
    trackByIndex: typeof trackByIndex;
    constructor(logger: Logger);
    /**
     * Change handler for the current page input field.
     * @param e the change event.
     */
    onCurrentPageChange(e: Event): void;
    checkPaginator($event: any, target: string, pageLink?: number): boolean;
    private continuePagination($event, target, pageLink);
    /** Current page first row index */
    readonly pageFirstRow: number;
    /** Current page last row index */
    readonly pageLastRow: number;
    readonly paginatorLabels: Labels;
}
