import { RequestOptionsArgs } from '@angular/http';
export declare class HttpReadRequest<RP> {
    /**
     * Creates a request object for GET or DELETE methods.
     * @param url request address
     * @param responseType class type to deserialize the response body
     * @see https://github.com/weichx/cerialize
     */
    static create<RP>(url: string, responseType?: new () => RP): HttpReadRequest<RP>;
    url: string;
    responseType?: new () => RP;
    responseStatus: number[];
    options?: RequestOptionsArgs;
    waitMessage: false | string;
    toastTokens: {
        [token: string]: string;
    };
    toastOnSuccess: boolean;
    toastOnFailure: boolean;
    expiresIn: number;
    forceRefresh: boolean;
    protected constructor(url: string, responseType?: new () => RP);
    /**
     * When provided, the `HttpService` will deserialize the response body (JSON) into
     * an instance of this class type.
     *
     * @see https://github.com/weichx/cerialize
     */
    withResponseType(responseType: new () => RP): this;
    /**
     * When provided, the `HttpService` will only accept responses with these status codes.
     * Defaults to `200`, `201` and `204`.
     */
    withResponseStatus(accepted: number, ...more: number[]): this;
    /**
     * Additional options to be sent to the wrapped `@angular/http` service.
     */
    withOptions(options: RequestOptionsArgs): this;
    /**
     * Pass a string token to be used as "please wait" message. It'll be translated.
     * Defaults to `PleaseWait.DEFAULT_MESSAGE_TOKEN`.
     *
     * Pass `false` to disable the "please wait" message.
     */
    withWaitMessage(waitMessage: false | string): this;
    /**
     * Configure the displaying of toast messages on success/failure.
     *
     * @param tokens Map of toast messages for each HTTP response status, plus `OK` and `ERROR`
     * messages. Key is the status code, `'OK'` or `'ERROR'`. Value is the string token (it'll
     * be translated). Pass `false` instead of a map if you don't want any toast at all.
     * Defaults to `HttpDisplayMessages` map.
     *
     * @param onSuccess Pass `false` to disable toast messages on successful requests.
     * Defaults to `true`.
     *
     * @param onFailure Pass `false` to disable toast messages on unsuccessful requests.
     * Defaults to `true`.
     */
    withToastMessages(tokens: {
        [token: string]: string;
    } | false, onSuccess?: boolean, onFailure?: boolean): this;
    /**
     * Configures the caching of the GET request.
     *
     * ### How the cache works
     * - Successive requests to the same URL are served from cache.
     * - Any of these conditions invalidates the cache:
     *   - any request option changes
     *   - the time expires
     *   - the http request fails
     *   - `forceRefresh` is true
     *
     * @param expiresIn cache expiration time in seconds. A negative value means no expiration time.
     * @param forceRefresh if true, this invocation will discard any previous cached value
     */
    withCache(expiresIn: number, forceRefresh?: boolean): this;
}
