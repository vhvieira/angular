import { Http, Response, RequestOptionsArgs } from '@angular/http';
import { Logger } from '@mastercard/ng-commons';
import { Observable } from 'rxjs/Observable';
export interface CacheEntry {
    stream: Observable<Response>;
    options: RequestOptionsArgs;
    expiresIn: number;
}
export interface HttpCache {
    [url: string]: CacheEntry;
}
/**
 * This service augments @angular/http with a cache for GET requests.
 *
 * It was created based on what I learned here:
 *
 * @see https://blog.angularindepth.com/rxjs-understanding-the-publish-and-share-operators-16ea2f446635
 * @see https://stackoverflow.com/q/36271899/259237
 */
export declare class CacheableHttpService {
    private delegate;
    private logger;
    cache: HttpCache;
    constructor(delegate: Http, logger: Logger);
    /** Performs a request with the `post` http method. */
    post(url: string, body: any, options?: RequestOptionsArgs): Observable<Response>;
    /** Performs a request with the `put` http method. */
    put(url: string, body: any, options?: RequestOptionsArgs): Observable<Response>;
    /** Performs a request with the `delete` http method. */
    delete(url: string, options?: RequestOptionsArgs): Observable<Response>;
    /** Performs a request with the `patch` http method. */
    patch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response>;
    /**
     * Performs a request with the `get` http method.
     * If you pass an expiration time, the Observable will be cached.
     *
     * ### How the cache works
     * - Successive requests to the same URL are served from cache.
     * - Any of these conditions invalidates the cache:
     *   - any request option changes
     *   - the time expires
     *   - the http request fails
     *   - `forceRefresh` is true
     *
     * @param url this address will be the key of the cache
     * @param options headers, query params etc.
     * @param expiresIn cache expiration time in seconds. A negative value means no expiration time.
     * @param forceRefresh if true, this invocation will discard any previous cached value
     */
    get(url: string, options?: RequestOptionsArgs, expiresIn?: number, forceRefresh?: boolean): Observable<Response>;
    private clearStaleEntries();
    private isExpired(expiresIn);
}
