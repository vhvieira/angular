import { Headers, RequestOptions } from '@angular/http';
import { LocaleService, Logger } from '@mastercard/ng-commons';
import { TranslateService } from '@ngx-translate/core';
import { Observable } from 'rxjs/Observable';
import { PleaseWaitService } from '../please-wait/please-wait.service';
import { ToastrService } from '../toastr/toastr.service';
import { HttpReadRequest } from './http-read-request.class';
import { HttpWriteRequest } from './http-write-request.class';
import { HttpResponse } from './http-response.class';
import { CacheableHttpService } from './cacheable-http.service';
/**
 * This service augments Angular's Http service with Mastercard's headers & error handling.
 *
 * It also adds a "please wait" message during the operation and toasts the result.
 *
 * All those options can be configured per request.
 *
 * The API is similar to Angular's Http class, but first you have to build a request object.
 * Use `HttpReadRequest` for GET & DELETE and `HttpWriteRequest` for POST, PUT & PATCH verbs.
 *
 * The service emits `HttpResponse` for successful requests and `HttpError` otherwise.
 */
export declare class HttpService {
    private delegate;
    private logger;
    private wait;
    private translate;
    private toastr;
    private window;
    private acceptLanguage;
    constructor(delegate: CacheableHttpService, window: any, locale: LocaleService, logger: Logger, wait: PleaseWaitService, translate: TranslateService, toastr: ToastrService);
    /**
     * Default HTTP headers that will be sent on each request.
     */
    readonly defaultHeaders: Headers;
    /**
     * Default `RequestOptions` that will be sent on each request.
     */
    readonly defaultOptions: RequestOptions;
    /**
     * Performs a request with the `get` http method.
     *
     * Emits `HttpResponse` when successful, `HttpError` otherwise.
     * @param request the configuration object.
     */
    get<RP>(request: HttpReadRequest<RP>): Observable<HttpResponse<RP>>;
    /**
     * Performs a request with the `post` http method.
     *
     * Emits `HttpResponse` when successful, `HttpError` otherwise.
     * @param request the configuration object.
     */
    post<RQ, RP>(request: HttpWriteRequest<RQ, RP>): Observable<HttpResponse<RP>>;
    /**
     * Performs a request with the `put` http method.
     *
     * Emits `HttpResponse` when successful, `HttpError` otherwise.
     * @param request the configuration object.
     */
    put<RQ, RP>(request: HttpWriteRequest<RQ, RP>): Observable<HttpResponse<RP>>;
    /**
     * Performs a request with the `delete` http method.
     *
     * Emits `HttpResponse` when successful, `HttpError` otherwise.
     * @param request the configuration object.
     */
    delete<RP>(request: HttpReadRequest<RP>): Observable<HttpResponse<RP>>;
    /**
     * Performs a request with the `patch` http method.
     *
     * Emits `HttpResponse` when successful, `HttpError` otherwise.
     * @param request the configuration object.
     */
    patch<RQ, RP>(request: HttpWriteRequest<RQ, RP>): Observable<HttpResponse<RP>>;
    private serialize<RQ, RP>(request);
    private handle<RP>(request, response$);
    private handleResponseStatus<RP>(request, response$);
    private deserialize<RP>(request, response);
    private handleError<RP>(request, error);
    private handleSuccess<RP>(request, response);
}
