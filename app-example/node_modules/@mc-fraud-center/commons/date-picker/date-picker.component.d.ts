import { EventEmitter, OnInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as momentNS from 'moment';
import { TranslateService } from '@ngx-translate/core';
import { Logger } from '@mastercard/ng-commons';
export declare class DatePickerComponent implements ControlValueAccessor, OnInit {
    private translateService;
    private logger;
    orient: any;
    title: string;
    lang: string;
    format: string;
    additionalFormats: string[];
    min: any;
    max: any;
    allowInvalid: boolean;
    allowEdit: boolean;
    customClassNames: string;
    changed: EventEmitter<{}>;
    input: any;
    curDate: any;
    calDate: any;
    componentValue: any;
    monthOfYear: any;
    daysOfWeek: any;
    open: boolean;
    openTimepicker: boolean;
    x: any;
    y: any;
    z: any;
    milliseconds: number;
    seconds: number;
    minutes: number;
    hours: number;
    display: string;
    disabled: boolean;
    displayValue: string;
    onTouched: any;
    datepickerClasses: any;
    rowCounts: any;
    constructor(translateService: TranslateService, logger: Logger);
    ngOnInit(): void;
    propagateChange: any;
    getInputClasses(): string;
    getClasses(): {
        'datepicker datepicker-dropdown': boolean;
        'dropdown-menu': boolean;
    };
    onClick($event: any): void;
    eatClick($event: any): void;
    onDeClick($event: Event | null): void;
    onDayClick(dt: any): void;
    onInputChange($event: any): void;
    displayMonth(): string;
    rowCount(): any[];
    calendarRow(row: any): any[];
    writeValue: (v: any) => void;
    registerOnChange(cb: any): void;
    registerOnTouched(cb: any): void;
    setDisabledState(disabled: any): void;
    _updateValue(v: any): void;
    _formatDisplay(): void;
    _first(date: any): momentNS.Moment;
    _last(date: any): momentNS.Moment;
    _start(date: any, row: any): momentNS.Moment;
    _validate(date: any): boolean;
    _disabled(dt: any): boolean;
    _normalizeTime(dt: any): any;
    _calDate(): void;
    trackByFn(i: number): number;
}
