{
  "version": 3,
  "file": "mastercard-ng-commons.js",
  "sources": [
    "ng://@mastercard/ng-commons/out/mastercard-commons.module.ts",
    "ng://@mastercard/ng-commons/out/pipe/required-field-label.pipe.ts",
    "ng://@mastercard/ng-commons/out/pipe/date.format.pipe.ts",
    "ng://@mastercard/ng-commons/out/service/message/message.service.ts",
    "ng://@mastercard/ng-commons/out/service/locale/locale.service.ts",
    "ng://@mastercard/ng-commons/out/service/locale/constants.ts",
    "ng://@mastercard/ng-commons/out/function/translate-static-loader.ts",
    "ng://@mastercard/ng-commons/out/function/mc-validators.ts",
    "ng://@mastercard/ng-commons/out/function/common-fn.ts",
    "ng://@mastercard/ng-commons/out/directive/trim.directive.ts",
    "ng://@mastercard/ng-commons/out/directive/strict-pattern.directive.ts",
    "ng://@mastercard/ng-commons/out/service/logger/logger.service.ts",
    "ng://@mastercard/ng-commons/out/service/logger/log-level.ts",
    "ng://@mastercard/ng-commons/out/directive/provide-parent-form.directive.ts",
    "ng://@mastercard/ng-commons/out/directive/show-error-icon.directive.ts",
    "ng://@mastercard/ng-commons/out/directive/custom-validator.directive.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CustomValidatorDirective } from './directive/custom-validator.directive';\nimport { ShowErrorIconDirective } from './directive/show-error-icon.directive';\nimport { ProvideParentFormDirective } from './directive/provide-parent-form.directive';\nimport { StrictPatternDirective } from './directive/strict-pattern.directive';\nimport { TrimDirective } from './directive/trim.directive';\n\nimport { DateFormatPipe } from './pipe/date.format.pipe';\nimport { RequiredFieldLabelPipe } from './pipe/required-field-label.pipe';\n\nimport { Logger } from './service/logger/logger.service';\nimport { getDefaultLogLevel } from './service/logger/log-level';\nimport { MessageService } from './service/message/message.service';\nimport { LocaleService } from './service/locale/locale.service';\n\nexport function getWindow(): Window { return window; }\n\nconst declarations = [\n  CustomValidatorDirective,\n  TrimDirective,\n  RequiredFieldLabelPipe,\n  ProvideParentFormDirective,\n  StrictPatternDirective,\n  ShowErrorIconDirective,\n  DateFormatPipe,\n];\n\n/** Mastercard's Utilities for Angular */\n@NgModule({\n  declarations,\n  imports: [CommonModule],\n  exports: [...declarations],\n})\nexport class MastercardCommons {\n\n  /**\n   * Use this method in your root module to register our providers.\n   */\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MastercardCommons,\n      providers: [\n        Logger,\n        MessageService,\n        LocaleService,\n        { provide: 'LogLevel', useFactory: getDefaultLogLevel },\n        { provide: 'Window', useFactory: getWindow },\n      ],\n    };\n  }\n\n}\n",
    "import { Pipe, PipeTransform } from '@angular/core';\n\nexport type FormFieldElement = HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\n\n/**\n * Appends the `*` char on the field label, if necessary.\n *\n * #### Example:\n * ```html\n * <label for=\"myField\"\n *   [innerHTML]=\"'My Field' | requiredFieldLabel:myField\"\n * ></label>\n * <input #myField id=\"myField\" ...\n * ```\n */\n@Pipe({ name: 'requiredFieldLabel' })\nexport class RequiredFieldLabelPipe implements PipeTransform {\n\n  readonly mark = \"<span class='required'>*</span>\";\n\n  /**\n   * @param value the span will be appended to this value\n   * @param field appends the span whe matching field is not provided or when it's a required field.\n   */\n  transform(value: string, field?: FormFieldElement): string {\n    const visible = typeof field === 'undefined' || field.required;\n    return value && visible ? value + this.mark : value;\n  }\n\n}\n",
    "import { Pipe, PipeTransform } from '@angular/core';\nimport * as momentNS from 'moment';\n\nconst moment = momentNS;\n\n/**\n * Transforms a `Date` or a `Moment` object into a string with the given format.\n * When no format is provided, defaults to `'DD-MMM-YYYY hh:mm A'`.\n *\n * #### Example:\n * ```html\n * <span>{{ myDate | dateFormat }}</span>\n * <span>{{ myDate2 | dateFormat:'YYYY-MM-DD' }}</span>\n * ```\n *\n * See {@link https://momentjs.com/docs/ } for more info.\n */\n@Pipe({\n  name: 'dateFormat'\n})\nexport class DateFormatPipe implements PipeTransform {\n  transform(value: Date | momentNS.Moment, ...args: string[]): string {\n    let [format] = args;\n    if (!format) {\n      format = 'DD-MMM-YYYY hh:mm A';\n    }\n    return moment(value).format(format);\n  }\n}\n",
    "import { Injectable, Inject } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { filter } from 'rxjs/operators';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\n\nexport function filterSameOrigin(window: Window) {\n  return (msg: MessageEvent) => msg.origin === window.location.origin;\n}\n\nexport function filterSameWindow(source: Window) {\n  return (msg: MessageEvent) => msg.source === source;\n}\n\n/**\n * This service allows the client to send/receive message events\n * to/from other windows as long as both windows share the same origin.\n */\n@Injectable()\nexport class MessageService {\n\n  private window: Window;\n  private message$: Observable<MessageEvent>;\n\n  constructor(\n    @Inject('Window') window: any,\n  ) {\n    this.window = window;\n    this.message$ = fromEvent<MessageEvent>(this.window, 'message').pipe(\n      filter(filterSameOrigin(window))\n    );\n  }\n\n  /**\n   * Provides a stream of messages coming from the given window.\n   *\n   * @param source filter messages that come from this window. Defaults to the parent window.\n   */\n  get(source = this.window.parent): Observable<MessageEvent> {\n    const fn = filterSameWindow(source);\n    return this.message$.pipe(filter(fn));\n  }\n\n  /**\n   * Sends a message to the given target window.\n   *\n   * @param message a value that will be serialized and sent as a message.\n   * @param target the message will be sent to this window. Defaults to the parent window.\n   */\n  post(message: any, target = this.window.parent): void {\n    const sameOrigin = this.window.location.origin;\n    target.postMessage(message, sameOrigin);\n  }\n\n}\n",
    "import { Injectable, Inject, Optional } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { of } from 'rxjs/observable/of';\n\nimport { LOCALE, LOCALE_STORAGE_KEY, LOCALE_QUERY_PARAM } from './constants';\n\n/**\n * This service provides the current locale.\n * It looks for the locale on:\n * 1. a URL query param;\n * 1. a session storage key;\n * 1. Fallback to the default \"en-US\".\n */\n@Injectable()\nexport class LocaleService {\n\n  private window: Window;\n\n  constructor(\n    @Inject('Window') window: any,\n    @Optional() private activated: ActivatedRoute,\n  ) {\n    this.window = window;\n  }\n\n  /**\n   * Retrieves the current locale.\n   * This stream re-emits the locale when the query param changes.\n   */\n  public getCurrent(): Observable<string> {\n    return of(LOCALE.DEFAULT).pipe(\n      // overrides with the locale on session storage\n      map((defaultLocale: string) => {\n        const sessionLocale = this.window.sessionStorage.getItem(LOCALE_STORAGE_KEY);\n        return sessionLocale || defaultLocale;\n      }),\n      // overrides with the locale on query param\n      mergeMap((locale: string) => {\n        if (this.activated) {\n          return this.activated.queryParams.pipe(\n            map(params => {\n              return params[LOCALE_QUERY_PARAM] || locale;\n            }),\n          );\n        } else {\n          return of(locale);\n        }\n      }),\n    );\n  }\n}\n",
    "export const LOCALE = Object.freeze({\n\n  ENGLISH: 'en-US',\n  SPANISH: 'es-CO',\n  PORTUGUESE: 'pt-BR',\n\n  get DEFAULT() { return this.ENGLISH; },\n\n});\n\nexport const LOCALE_STORAGE_KEY = 'locale';\nexport const LOCALE_QUERY_PARAM = 'locale';\n",
    "import { TranslateLoader, TranslateModuleConfig } from '@ngx-translate/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Http, Response } from '@angular/http';\nimport { map } from 'rxjs/operators';\nimport { forkJoin } from 'rxjs/observable/forkJoin';\n\nexport function makeConfig(factoryFn: (...args: any[]) => TranslateLoader): TranslateModuleConfig {\n  return {\n    loader: {\n      provide: TranslateLoader,\n      useFactory: factoryFn,\n      deps: [Http],\n    },\n  };\n}\n\nexport class TranslateStaticLoader implements TranslateLoader {\n\n  constructor(\n    readonly http: Http,\n    readonly prefix = 'i18n',\n    readonly suffix = '.json',\n    private apps: string[],\n  ) {\n    // empty\n  }\n\n  /**\n   * Gets the translations from the server\n   * @param lang\n   */\n  public getTranslation(lang: string): Observable<any> {\n    const requests: any[] = [];\n    const prefix = this.prefix;\n    const suffix = this.suffix;\n\n    // Load global\n    requests.push(this.http.get(prefix + '/' + lang + '/' + lang + suffix));\n\n    // Load app-specific i18n files\n    this.apps.forEach((appName: string) => {\n      const url: string = prefix + '/' + lang + '/' + appName + '_' + lang + suffix;\n      requests.push(this.http.get(url));\n    });\n\n    return forkJoin<Response>(...requests).pipe(\n      map(responses => {\n        const first = responses.shift();\n        const combined = first && first.json();\n\n        let counter = 0;\n        responses.forEach((res: Response) => {\n          const translates = res.json();\n          const appName: string = this.apps[counter];\n          combined[appName.toUpperCase()] = translates[appName.toUpperCase()];\n          counter++;\n        });\n        return combined;\n      }),\n    );\n  }\n}\n",
    "import { ValidatorFn, AbstractControl } from '@angular/forms';\n\n/**\n * Validator that forbids controls values to have the following characters:\n * ? ' \" < > /\n */\nexport function searchValidator(): ValidatorFn {\n  return (c: AbstractControl) => {\n    const pattern = /[\\?\\'\\\"\\<\\>\\/]+/g;\n    const value = String(c.value || '');\n    return pattern.test(value) ? { invalidCharError: true } : null;\n  };\n}\n",
    "// shared common functions\n\n// NgForOf trackers -----------------------------------------------------------\n\n// To customize the default tracking algorithm, NgForOf supports trackBy option.\n// trackBy takes a function which has two arguments: index and item.\n// If trackBy is given, Angular tracks changes by the return value of the function.\n\n/**\n * Detects a change when an index changes.\n *\n * ```html\n * <li *ngFor=\"let msg of messages; trackBy: trackByIndex\">...\n * ```\n * @see https://angular.io/api/common/NgForOf\n */\nexport function trackByIndex(i: number): number {\n  return i;\n}\n\n// -----------------------------------------------------------------------------\n",
    "import {\n  Directive, HostListener, ElementRef, Output, EventEmitter\n} from '@angular/core';\n\n/**\n * Trims the field value & the model value on change.\n *\n * Works with input & textarea.\n *\n * #### Example:\n * ```html\n * <input type=\"text\" mcTrim [(ngModel)]=...\n * ```\n */\n@Directive({\n  selector: 'input[mcTrim],textarea[mcTrim]'\n})\nexport class TrimDirective {\n\n  @Output()\n  ngModelChange = new EventEmitter();\n\n  private element: HTMLInputElement | HTMLTextAreaElement;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  @HostListener('change', ['$event.target.value'])\n  onChange(value: string): void {\n    value = value.trim();\n    this.element.value = value;\n    this.ngModelChange.emit(value);\n  }\n\n}\n",
    "import { Directive, ElementRef, HostListener, Input, Output, EventEmitter } from '@angular/core';\nimport { Logger } from '../service/logger/logger.service';\n\n/**\n * This directive ensures that the input field accepts only values that matches the `[pattern]` regex.\n * If the user tries to input an invalid value, the directive will deny the value change.\n * The validation occurs on `input` or `change` event.\n *\n * ### Example\n * ```html\n * <input type=\"text\" mcStrict pattern=\"^[0-9]+$\" />\n * <input type=\"text\" mcStrict=\"change\" pattern=\"^[a-zA-Z]+$\" />\n * ```\n */\n@Directive({\n  selector: 'input[type=text][mcStrict][pattern]'\n})\nexport class StrictPatternDirective {\n\n  // tslint:disable:no-input-rename\n  @Input('mcStrict') event?: 'change';\n\n  @Output() ngModelChange: EventEmitter<string> = new EventEmitter();\n\n  constructor(\n    private el: ElementRef,\n    private logger: Logger,\n  ) {\n    this.logger.debug('Strict Pattern Directive built');\n  }\n\n  @HostListener('change', ['$event']) onChange(e: any): void {\n    if (this.event) {\n      if (this.event === 'change') {\n        this.validation(e);\n      } else {\n        this.logger.warn('Only change event is allowed.');\n      }\n    }\n  }\n\n  @HostListener('input', ['$event']) onInput(e: any): void {\n    if (!this.event) {\n      this.validation(e);\n    }\n  }\n\n  private validation(e: any) {\n    const newValue = e.target.value;\n    const pattern = this.el.nativeElement.attributes.getNamedItem('pattern').value;\n    const reg = new RegExp(pattern);\n    if (reg.test(newValue) || newValue === '') {\n      e.target.previousValue = e.target.value;\n      this.logger.debug(`Pattern ok. Value = \"${e.target.value}\"`);\n    } else {\n      e.target.value = e.target.previousValue || '';\n      this.ngModelChange.emit(e.target.value);\n      this.logger.debug(`Pattern ko. Restoring value = \"${e.target.value}\"`);\n    }\n  }\n}\n",
    "import { Injectable, Inject } from '@angular/core';\nimport { LogLevel } from './log-level';\n\n// tslint:disable:no-console\n\n/**\n * Logs messages with different levels of severity.\n */\n@Injectable()\nexport class Logger {\n\n  level: LogLevel;\n\n  constructor( @Inject('LogLevel') level: any) {\n    this.level = level;\n  }\n\n  /**\n   * Logs an error message.\n   *\n   * Each argument is concatenated into a space-delimited string.\n   * @param message the value to be logged.\n   * @param optionalParams you can pass as many values as you want.\n   */\n  error(message: any, ...optionalParams: any[]): void {\n    if (this.level <= LogLevel.ERROR)\n      console.error(message, ...optionalParams);\n  }\n\n  /**\n   * Logs a warn message.\n   *\n   * Each argument is concatenated into a space-delimited string.\n   * @param message the value to be logged.\n   * @param optionalParams you can pass as many values as you want.\n   */\n  warn(message: any, ...optionalParams: any[]): void {\n    if (this.level <= LogLevel.WARN)\n      console.warn(message, ...optionalParams);\n  }\n\n  /**\n   * Logs an info message.\n   *\n   * Each argument is concatenated into a space-delimited string.\n   * @param message the value to be logged.\n   * @param optionalParams you can pass as many values as you want.\n   */\n  info(message: any, ...optionalParams: any[]): void {\n    if (this.level <= LogLevel.INFO)\n      console.info(message, ...optionalParams);\n  }\n\n  /**\n   * Logs a debug message.\n   *\n   * Each argument is concatenated into a space-delimited string.\n   * @param message the value to be logged.\n   * @param optionalParams you can pass as many values as you want.\n   */\n  debug(message: any, ...optionalParams: any[]): void {\n    if (this.level <= LogLevel.DEBUG)\n      console.log(message, ...optionalParams);\n  }\n\n}\n",
    "/** error > warn > info > debug */\nexport enum LogLevel {\n  DEBUG,\n  INFO,\n  WARN,\n  ERROR,\n}\n\n/** Default log level for the Logger service. */\nlet logLevel = LogLevel.INFO;\n\n/** Factory fn for the LogLevel provider. */\nexport function getDefaultLogLevel(): LogLevel {\n  return logLevel;\n}\n\n/**\n * Changes the default LogLevel for the Logger service.\n * @param level new level.\n */\nexport function setDefaultLogLevel(level: LogLevel) {\n  logLevel = level;\n}\n",
    "import { Directive } from '@angular/core';\nimport { NgForm, ControlContainer } from '@angular/forms';\n\nexport function formFactory(form: NgForm) {\n  return form;\n}\n\n/**\n * This directive provides a parent form to a child component\n * ### Example:\n * ```html\n * <!-- parent component -->\n * <form #parentForm=\"ngForm\">\n *   <label>Parent Input:</label>\n *   <input [(ngModel)]=\"parentInput\" name=\"parentInput\" />\n *   <child-component></child-component>\n *  (...)\n *\n * <!-- child component -->\n *  <div style=\"color: red;\" mcProvideParentForm>\n *    <label>Child Input:</label>\n *    <input [(ngModel)]=\"childInput\" name=\"childInput\" />\n *\n * ```\n * @see https://github.com/angular/angular/issues/9600#issuecomment-326865141\n */\n@Directive({\n  selector: '[mcProvideParentForm]',\n  providers: [\n    {\n      provide: ControlContainer,\n      useFactory: formFactory,\n      deps: [NgForm]\n    }\n  ]\n})\nexport class ProvideParentFormDirective {\n}\n",
    "import {\n  Directive,\n  ElementRef,\n  OnChanges,\n  OnInit,\n  Input,\n  Renderer2\n} from '@angular/core';\n\n@Directive({\n  selector: '[mcShowErrorIcon]'\n})\nexport class ShowErrorIconDirective implements OnChanges, OnInit {\n  @Input() mcShowErrorIcon: boolean;\n\n  private errorIconElement: HTMLSpanElement;\n  private divElement: HTMLDivElement;\n  private hasError = false;\n\n  constructor(private el: ElementRef, private renderer: Renderer2) {\n    this.errorIconElement = this.renderer.createElement(`span`);\n    this.divElement = this.renderer.createElement(`div`);\n  }\n\n  ngOnInit() {\n    const parent = this.el.nativeElement.parentNode;\n    this.renderer.addClass(this.errorIconElement, `sprite`);\n    this.renderer.addClass(this.errorIconElement, `icon-error`);\n    this.renderer.addClass(this.divElement, `input-icon-error-wrapper`);\n    this.renderer.insertBefore(parent, this.divElement, this.el.nativeElement);\n    this.renderer.removeChild(parent, this.el.nativeElement);\n    this.renderer.appendChild(this.divElement, this.el.nativeElement);\n  }\n\n  ngOnChanges() {\n    if (this.mcShowErrorIcon) {\n      this.addError();\n    } else {\n      this.removeError();\n    }\n  }\n\n  private addError() {\n    this.renderer.appendChild(this.divElement, this.errorIconElement);\n    this.hasError = true;\n  }\n\n  private removeError() {\n    if (this.hasError) {\n      this.renderer.removeChild(this.divElement, this.errorIconElement);\n      this.hasError = false;\n    }\n  }\n}\n",
    "import { Directive, forwardRef, Input } from '@angular/core';\nimport { Validator, AbstractControl, NG_VALIDATORS, ValidatorFn, ValidationErrors } from '@angular/forms';\n\n/**\n * This directive lets you add custom validator functions to your template based forms.\n * Angular will then use your function to mark the field as valid/invalid.\n *\n * ### Example:\n * ```\n * // component.html\n * <input #myField=\"ngModel\" [(ngModel)]='whatever'\n *   [mcCustomValidator]=\"myCustomValidator()\" ... />\n * <div *ngIf=\"myField.errors.myCustomErr\">\n *   {{ myField.errors.myCustomErr }}\n * </div>\n *\n * // component.ts\n * import { AbstractControl, ValidatorFn } from '@angular/forms';\n * // (...)\n * myCustomValidator(): ValidatorFn {\n *   return (c: AbstractControl) => {\n *     return c.value === 'foo' || c.value === 'bar'\n *       ? null // any non null value is an error\n *       : { myCustomErr: 'Value must be foo or bar' };\n *   }\n * }\n * ```\n */\n@Directive({\n  selector: '[mcCustomValidator][ngModel]',\n  providers: [\n    { provide: NG_VALIDATORS, useExisting: forwardRef(() => CustomValidatorDirective), multi: true }\n  ]\n})\nexport class CustomValidatorDirective implements Validator {\n\n  @Input() mcCustomValidator: ValidatorFn;\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this.mcCustomValidator(c);\n  }\n\n}\n"
  ],
  "names": [],
  "mappings": "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"
}
