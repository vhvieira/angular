import { Validator, AbstractControl, ValidatorFn, ValidationErrors } from '@angular/forms';
/**
 * This directive lets you add custom validator functions to your template based forms.
 * Angular will then use your function to mark the field as valid/invalid.
 *
 * ### Example:
 * ```
 * // component.html
 * <input #myField="ngModel" [(ngModel)]='whatever'
 *   [mcCustomValidator]="myCustomValidator()" ... />
 * <div *ngIf="myField.errors.myCustomErr">
 *   {{ myField.errors.myCustomErr }}
 * </div>
 *
 * // component.ts
 * import { AbstractControl, ValidatorFn } from '@angular/forms';
 * // (...)
 * myCustomValidator(): ValidatorFn {
 *   return (c: AbstractControl) => {
 *     return c.value === 'foo' || c.value === 'bar'
 *       ? null // any non null value is an error
 *       : { myCustomErr: 'Value must be foo or bar' };
 *   }
 * }
 * ```
 */
export declare class CustomValidatorDirective implements Validator {
    mcCustomValidator: ValidatorFn;
    validate(c: AbstractControl): ValidationErrors | null;
}
